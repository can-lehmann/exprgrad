tensor1 = input(a)
tensor2 = input(b)
c tensor0:
  kernel:
    reg6 = tensor1.shape[0]
    reg8 = tensor2.shape[1]
    reg7 = tensor1.shape[1]
    reg25 = tensor1.shape[1]
    reg38 = tensor2.shape[1]
    reg60 = tensor0.shape[1]
    gpu (local reg14, group reg68, size 32) in 0 to reg8
        (local reg15, group reg71, size 16) in 0 to reg6:
      reg11 = (reg68 * 32)
      reg3 = (reg11 + reg14)
      reg10 = (reg71 * 16)
      reg0 = (reg10 + reg15)
      if ((reg3 < reg8) and (reg0 < reg6)):
        reg12 = shared_cache[256]
        reg18 = ((reg15 * 32) + reg14)
        reg30 = (reg18 < 256)
        reg13 = shared_cache[512]
        reg33 = ((reg15 * 32) + reg14)
        reg35 = (reg11 + reg14)
        reg49 = (((reg10 * -1) + reg0) * 16)
        reg53 = (reg3 + (reg11 * -1))
        reg62 = (reg3 + (reg0 * reg60))
        loop reg9 in 0 to reg7 step 16:
          barrier()
          if reg30:
            reg28 = read[tensor1](((reg9 + (reg18 mod 16)) + ((reg10 + (reg18 div 16)) * reg25)))
            cachewrite(reg12, reg18, reg28)
          reg41 = read[tensor2]((reg35 + ((reg15 + reg9) * reg38)))
          cachewrite(reg13, reg33, reg41)
          barrier()
          reg42 = (reg9 * -1)
          reg55 = (reg9 * -1)
          loop reg1 in reg9 to (reg9 + 16):
            write[tensor0](reg62, (arrayread[tensor1](reg12, ((reg1 + reg42) + reg49)) * arrayread[tensor2](reg13, (reg53 + ((reg1 + reg55) * 32)))))